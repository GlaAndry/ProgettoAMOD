Lungheza roll L = 20

modulo_1 --> [Lungheza = 9, Domanda = 511]
modulo_2 --> [Lungheza = 8, Domanda = 301]
modulo_3 --> [Lungheza = 7, Domanda = 263]
modulo_4 --> [Lungheza = 6, Domanda = 383]

Soluzionione ottima:
                            numero di papaer    domanda rispettata
                            roll usati.

Matrice B : [[2,0,0,0], --> 255.5              --> 255.5 * 2 = 511
             [0,2,0,0], --> 87.625             --> 87,625*2 + 125.75*1 = 301
             [0,0,2,1], --> 131.5              --> 131.5 * 2 = 263
             [0,1,0,2]] --> 125.75             --> 125.75*2 + 131.5*1 = 383
                            -------
                            600.375 --> arrotondo per eccesso --> 601 (soluzione ottima, cio√® numero minimo di paper roll usati per adempiere alla domanda.)
             ##La matrice B identifica la matrice dei tagli effettuati Aj



def calculate():

    B = cs.determineInitialPattern(L,listOfModules)
    #print(B)
    C = cs.numeroTagliDataDomanda(B, listOdDemands)
    print("Numero Di tagli data la domanda per questo pattern: ", C)
    print("Valore soluzione corrente: ", cs.totalRolls(C))

    Y = cs.determinDualValue(B, n)
    enteringPattern = cs.resolve_pricing(L, Y, listOfModules)
    exitPattern = cs.determineExitPattern(B, enteringPattern, n)

    positionExit = cs.determinePositionExit(exitPattern, C)

    B_new = cs.changeBase(B, positionExit, enteringPattern)
    ###############################
    print(B_new)

    C = cs.numeroTagliDataDomanda(B_new, listOdDemands)
    print("Numero Di tagli data la domanda per questo pattern: ", C)
    print("Valore soluzione corrente: ", cs.totalRolls(C))

    Y = cs.determinDualValue(B_new, n)
    enteringPattern = cs.resolve_pricing(L, Y, listOfModules)
    exitPattern = cs.determineExitPattern(B_new, enteringPattern, n)

    positionExit = cs.determinePositionExit(exitPattern, C)
    print(positionExit)

    B_new2 = cs.changeBase(B_new, positionExit, enteringPattern)

    ####################################

    C = cs.numeroTagliDataDomanda(B_new2, listOdDemands)
    print("Numero Di tagli data la domanda per questo pattern: ", C)
    print("Valore soluzione corrente: ", cs.totalRolls(C))

    Y = cs.determinDualValue(B_new2, n)
    print(Y)

    enteringPattern = cs.resolve_pricing(L, Y, listOfModules)
    
    if(len(enteringPattern) == 0):
        print("Trovata la soluzione ottima!\n")
        print("Numero Di tagli data la domanda per questo pattern: ", C)
        print("Valore soluzione corrente: ", cs.totalRolls(C))
    #exitPattern = cs.determineExitPattern(B_new2, enteringPattern, n)

    #positionExit = cs.determinePositionExit(exitPattern, enteringPattern)

    #print(positionExit)
    #print(B_new2)

    #print(A)

    return None

#calculate()